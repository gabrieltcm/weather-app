{"version":3,"sources":["styles/Header.module.scss","styles/Error.module.scss","Context.js","components/Header.js","components/Form.js","components/WeatherData.js","components/Error.js","components/Main.js","App.js","reportWebVitals.js","index.js","styles/Form.module.scss","styles/WeatherData.module.scss"],"names":["module","exports","Context","createContext","Header","Fragment","className","styles","header","Form","call_the_api","useContext","onSubmit","formContainer","label","type","placeholder","name","submit","WeatherData","array_of_weather","map","element","index","column","card","city","weatherIcon","Math","trunc","temp","description","Error","error","style","Main","useState","weatherArray","setweatherArray","setError","get_weatherIcon","rangeId","api_call","e","a","preventDefault","target","elements","value","url","request","axios","get","response","weatherInfo","data","weather","id","main","length","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cdd22ce8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1LeQS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error_error__1lRRS\"};","import { createContext } from \"react\";\n\nconst Context = createContext();\n\nexport default Context;\n","import React from \"react\";\nimport styles from \"../styles/Header.module.scss\";\n\nexport default function Header() {\n  return (\n    <React.Fragment>\n      <h1 className={styles.header}>Weather Condition App</h1>\n    </React.Fragment>\n  );\n}\n","import React, { useContext } from \"react\";\nimport styles from \"../styles/Form.module.scss\";\n\nimport Context from \"../Context\";\n\nconst Form = () => {\n  //access the props from Context provider stated in Main.js\n  const { call_the_api } = useContext(Context);\n\n  return (\n    //On submit, call the prop\n    <form onSubmit={call_the_api} className={styles.formContainer}>\n      {/* City Name */}\n      <label className={styles.label}>City Name:</label>\n      <input type=\"text\" placeholder=\"City name...\" name=\"city\" />\n\n      {/* Get Weather Button */}\n      <button className={styles.submit}>Get Weather</button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React, { useContext } from \"react\";\nimport styles from \"../styles/WeatherData.module.scss\";\n\nimport Context from \"../Context\";\n\nconst WeatherData = () => {\n  //access the props from Context provider stated in Main.js\n  const { array_of_weather } = useContext(Context);\n\n  //loop through the array, and output the element\n  return array_of_weather.map((element, index) => {\n    return (\n      <div key={index} className={styles.column}>\n        <div className={styles.card}>\n          <h3>{element.city}</h3>\n          <i className={`wi ${element.weatherIcon} display-1`}></i>\n          <h3>{Math.trunc(element.temp.temp)}&deg; celcius</h3>\n          <p>{element.description}</p>\n        </div>\n      </div>\n    );\n  });\n};\n\nexport default WeatherData;\n","import React, { useContext } from \"react\";\nimport style from \"../styles/Error.module.scss\";\n\nimport Context from \"../Context\";\n\nconst Error = () => {\n  const { error } = useContext(Context);\n  return <div className={style.error}>{error}</div>;\n};\n\nexport default Error;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\n\n//Weather Icons\nimport \"weather-icons/css/weather-icons.css\";\n\nimport Context from \"../Context\";\n\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport WeatherData from \"./WeatherData\";\nimport Error from \"./Error\";\n\nconst Main = () => {\n  // useState\n  // weatherArray is our state\n  // and setweatherArray is the function for us to update the weatherArray state (acts like a setState in the class based component)\n  const [weatherArray, setweatherArray] = useState([]);\n  const [error, setError] = useState();\n\n  //Assigning the weather id from OpenWeather API to their specific icons\n  const get_weatherIcon = (rangeId) => {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        return \"wi-thunderstorm\";\n      case rangeId >= 300 && rangeId <= 321:\n        return \"wi-sleet\";\n      case rangeId >= 500 && rangeId <= 531:\n        return \"wi-storm-showers\";\n      case rangeId >= 600 && rangeId <= 622:\n        return \"wi-snow\";\n      case rangeId >= 701 && rangeId <= 781:\n        return \"wi-fog\";\n      case rangeId === 800:\n        return \"wi-day-sunny\";\n      case rangeId >= 801 && rangeId <= 804:\n        return \"wi-day-fog\";\n      default:\n        return \"wi-day-fog\";\n    }\n  };\n  //The async await combination make sure that the api_call method does not go any further until axios has successfully made the request,\n  // and received the data from the API.\n  // Axios being a PROMISE based request, we also need to give Axios something back. So the best way to handle a PROMISE is to use ASYNC AWAIT.\n  const api_call = async (e) => {\n    e.preventDefault(); //prevents the page from refreshing when a form gets submitted, cause by default it refreshes\n    const city = e.target.elements.city.value; //assignining the user input from the City Name... input placeholder\n    if (!city)\n      // eslint-disable-next-line no-sequences\n      return setError(\"Please enter the name of the city.\");\n\n    setError(null);\n    const API_KEY = \"53de08b7a7ff9dbc9df4ea3a801b1bd2\";\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`;\n    const request = axios.get(url); //do a http call with axios\n    const response = await request; //all the data received from the API will be stored inside this reponse const\n\n    // an object containing all the necessary data i want from the Openweather api\n    // storing data in to a key (city,weatherIcon,temp,description)\n    const weatherInfo = {\n      city: response.data.name,\n      weatherIcon: get_weatherIcon(response.data.weather[0].id),\n      temp: response.data.main,\n      description: response.data.weather[0].description,\n    };\n\n    //to check if the there is more than 3 cards, if yes return ERROR\n    if (weatherArray.length >= 3)\n      return setError(\"Only can insert 3 weather cities :(\");\n    // the ...(spread operator), means insterting weatherInfo in to weatherArray\n    // eg:\n    // const array = [\"1\",\"2\",\"3\"]\n    // setArray(...array, \"6\")\n    // OUTPUT: 1,2,3,6\n    setweatherArray([...weatherArray, weatherInfo]); //assign all the data gathered from the API in to an ARRAY\n  };\n\n  return (\n    <div>\n      <Header />\n      {/* Using the provider from context API to pass props(stated in the \"value\" to all components wrapped in the <Context></Context> */}\n      <Context.Provider\n        // assign the state and function in to a prop\n        value={{\n          call_the_api: api_call,\n          error: error,\n          array_of_weather: weatherArray,\n        }}\n      >\n        <Form />\n        <WeatherData />\n        <Error />\n      </Context.Provider>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport \"./styles/App.module.scss\";\n\nimport Main from \"./components/Main\";\n\nexport default function App() {\n  return (\n    <React.Fragment>\n      <Main />\n    </React.Fragment>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"Form_formContainer__1DtQt\",\"label\":\"Form_label__3rxEG\",\"submit\":\"Form_submit__FGbZY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"column\":\"WeatherData_column__3liLQ\",\"row\":\"WeatherData_row__2_bAg\",\"card\":\"WeatherData_card__2TZ6M\"};"],"sourceRoot":""}